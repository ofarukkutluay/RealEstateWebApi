// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealEstateWebApi.Persistence.Contexts;

#nullable disable

namespace RealEstateWebApi.Persistence.Migrations
{
    [DbContext(typeof(RealEstateWebApiDbContext))]
    [Migration("20220724135110_mig_10")]
    partial class mig_10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Agent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("JobTitleId")
                        .HasColumnType("bigint");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ViewMobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("ViewPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("YoutubeProfileUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("BlogPageImgFileId")
                        .HasColumnType("bigint");

                    b.Property<long>("BlogTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("BlogPageImgFileId");

                    b.HasIndex("BlogTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.BlogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BlogTypes");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dns")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedinUrl")
                        .HasColumnType("text");

                    b.Property<long?>("LogoImgFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("SummaryInfo")
                        .HasColumnType("text");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ViewName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LogoImgFileId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("StartingYear")
                        .HasColumnType("integer");

                    b.Property<string>("TaxAdministration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TaxNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssignedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CitizenNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber2")
                        .HasColumnType("text");

                    b.Property<long?>("NeighborhoodId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("text");

                    b.Property<long>("RegisterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.CustomerOwnedShortProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShortPropertyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ShortPropertyId");

                    b.ToTable("CustomerOwnedShortProperties");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.CustomerSearchShortProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("ShortPropertyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShortPropertyId");

                    b.ToTable("CustomerSearchShortProperties");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.DeedStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DeedStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 873, DateTimeKind.Utc).AddTicks(4630),
                            IsActive = true,
                            Title = "Kat Mülkiyetli"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 873, DateTimeKind.Utc).AddTicks(4631),
                            IsActive = true,
                            Title = "Kat İrtifaklı"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 873, DateTimeKind.Utc).AddTicks(4632),
                            IsActive = true,
                            Title = "Arsa"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 873, DateTimeKind.Utc).AddTicks(4633),
                            IsActive = true,
                            Title = "Tarla"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CityKey")
                        .HasColumnType("integer");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntrySubTitle")
                        .HasColumnType("text");

                    b.Property<long>("EntrySubTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntryTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EntrySubTypeId");

                    b.HasIndex("EntryTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.EntrySubType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EntryTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntryTypeId");

                    b.ToTable("EntrySubTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8219),
                            EntryTypeId = 1L,
                            IsActive = true,
                            Title = "Ziyaret"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8222),
                            EntryTypeId = 1L,
                            IsActive = true,
                            Title = "Telefon"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.EntryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EntryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8586),
                            IsActive = true,
                            Title = "Görüşme"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Front", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Fronts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8931),
                            IsActive = true,
                            Title = "Kuzey"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8933),
                            IsActive = true,
                            Title = "Kuzey Doğu"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8934),
                            IsActive = true,
                            Title = "Doğu"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8935),
                            IsActive = true,
                            Title = "Güney Doğu"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8936),
                            IsActive = true,
                            Title = "Güney"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8937),
                            IsActive = true,
                            Title = "Güney Batı"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8939),
                            IsActive = true,
                            Title = "Batı"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(8940),
                            IsActive = true,
                            Title = "Kuzey Batı"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.HeatingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("HeatingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9445),
                            IsActive = true,
                            Title = "Doğalgaz Sobalı"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9446),
                            IsActive = true,
                            Title = "Sobalı"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9447),
                            IsActive = true,
                            Title = "Yerden Isıtma"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9448),
                            IsActive = true,
                            Title = "Kombili"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9449),
                            IsActive = true,
                            Title = "Merkezi Sistem"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9449),
                            IsActive = true,
                            Title = "FuelOil"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Identity.OperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Alias = "ADMIN",
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 875, DateTimeKind.Utc).AddTicks(8504),
                            Description = "Admin account",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Alias = "USER",
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 875, DateTimeKind.Utc).AddTicks(8507),
                            Description = "User account",
                            IsActive = true,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3L,
                            Alias = "AGENT",
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 875, DateTimeKind.Utc).AddTicks(8508),
                            Description = "Agent account",
                            IsActive = true,
                            Name = "Agent"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CitizenNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PassHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PassSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<long?>("ProfileImgFileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfileImgFileId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Identity.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Identity.UserOperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("OperationClaimId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.InternetType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("InternetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9785),
                            IsActive = true,
                            Title = "Adsl/Vdsl"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9787),
                            IsActive = true,
                            Title = "Fiber"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9788),
                            IsActive = true,
                            Title = "Uydu"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 874, DateTimeKind.Utc).AddTicks(9789),
                            IsActive = true,
                            Title = "Altyapı Yok"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.JobTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("text");

                    b.Property<string>("SenderMobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Neighborhood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DistrictKey")
                        .HasColumnType("integer");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Aidat")
                        .HasColumnType("double precision");

                    b.Property<int?>("BalconyCount")
                        .HasColumnType("integer");

                    b.Property<int?>("BathRoomCount")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingAge")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingFloor")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingTotalFloor")
                        .HasColumnType("integer");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DeedStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("FrontId")
                        .HasColumnType("bigint");

                    b.Property<int?>("GarageCount")
                        .HasColumnType("integer");

                    b.Property<int>("GrossSquareMeter")
                        .HasColumnType("integer");

                    b.Property<long>("HeatingTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("InternetTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailableLoan")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnSite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmartHome")
                        .HasColumnType("boolean");

                    b.Property<string>("KonumIFrame")
                        .HasColumnType("text");

                    b.Property<string>("Landscape")
                        .HasColumnType("text");

                    b.Property<int>("LivingRoomCount")
                        .HasColumnType("integer");

                    b.Property<double?>("LocationLat")
                        .HasColumnType("double precision");

                    b.Property<double?>("LocationLon")
                        .HasColumnType("double precision");

                    b.Property<long>("NeighborhoodId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long>("PropertyStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("PropertyTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoomCount")
                        .HasColumnType("integer");

                    b.Property<string>("SiteName")
                        .HasColumnType("text");

                    b.Property<long?>("StreetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsableSquareMeter")
                        .HasColumnType("integer");

                    b.Property<long>("UsingStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeedStatusId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("FrontId");

                    b.HasIndex("HeatingTypeId");

                    b.HasIndex("InternetTypeId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("PropertyStatusId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("StreetId");

                    b.HasIndex("UsingStatusId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.PropertyStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PropertyStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9016),
                            IsActive = true,
                            Title = "Satılık"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9019),
                            IsActive = true,
                            Title = "Kiralık"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9020),
                            IsActive = true,
                            Title = "Devren Satılık"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9021),
                            IsActive = true,
                            Title = "Devren Kiralık"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.PropertyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9408),
                            IsActive = true,
                            Title = "Daire"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9410),
                            IsActive = true,
                            Title = "Residans"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9410),
                            IsActive = true,
                            Title = "Müstakil Ev"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9411),
                            IsActive = true,
                            Title = "Müstakil Bina"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9412),
                            IsActive = true,
                            Title = "Villa"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9413),
                            IsActive = true,
                            Title = "Çiftlik Evi"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9413),
                            IsActive = true,
                            Title = "Yazlık"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9415),
                            IsActive = true,
                            Title = "Büro/Ofis"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9415),
                            IsActive = true,
                            Title = "Depo/Antrepo"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9416),
                            IsActive = true,
                            Title = "Dükkan/Mağaza"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9417),
                            IsActive = true,
                            Title = "Plaza"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9418),
                            IsActive = true,
                            Title = "Palaza Katı"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9418),
                            IsActive = true,
                            Title = "Sağlık Merkezi"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 881, DateTimeKind.Utc).AddTicks(9419),
                            IsActive = true,
                            Title = "Spor Tesisi"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.ShortProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("LivingRoomCount")
                        .HasColumnType("integer");

                    b.Property<long?>("NeighborhoodId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<long>("PropertyStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("PropertyTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RoomCount")
                        .HasColumnType("integer");

                    b.Property<long?>("StreetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("PropertyStatusId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("StreetId");

                    b.ToTable("ShortProperties");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Street", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NeighborhoodKey")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.UsingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UsingStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 884, DateTimeKind.Utc).AddTicks(5386),
                            IsActive = true,
                            Title = "Boş"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 884, DateTimeKind.Utc).AddTicks(5388),
                            IsActive = true,
                            Title = "Mülk Sahibi"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDate = new DateTime(2022, 7, 24, 13, 51, 9, 884, DateTimeKind.Utc).AddTicks(5389),
                            IsActive = true,
                            Title = "Kiracılı"
                        });
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.PropertyPhoto", b =>
                {
                    b.HasBaseType("RealEstateWebApi.Domain.Entities.File");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("PropertyPhoto");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Agent", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Identity.User", null)
                        .WithOne()
                        .HasForeignKey("RealEstateWebApi.Domain.Entities.Agent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Blog", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.File", null)
                        .WithMany()
                        .HasForeignKey("BlogPageImgFileId");

                    b.HasOne("RealEstateWebApi.Domain.Entities.BlogType", null)
                        .WithMany()
                        .HasForeignKey("BlogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.BlogType", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Client", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.File", null)
                        .WithMany()
                        .HasForeignKey("LogoImgFileId");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Customer", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Neighborhood", null)
                        .WithMany()
                        .HasForeignKey("NeighborhoodId");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.CustomerOwnedShortProperty", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId");

                    b.HasOne("RealEstateWebApi.Domain.Entities.ShortProperty", null)
                        .WithMany()
                        .HasForeignKey("ShortPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.CustomerSearchShortProperty", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.ShortProperty", null)
                        .WithMany()
                        .HasForeignKey("ShortPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Entry", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.EntrySubType", null)
                        .WithMany()
                        .HasForeignKey("EntrySubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.EntryType", null)
                        .WithMany()
                        .HasForeignKey("EntryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.EntrySubType", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.EntryType", null)
                        .WithMany()
                        .HasForeignKey("EntryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.File", null)
                        .WithMany()
                        .HasForeignKey("ProfileImgFileId");
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Identity.UserOperationClaim", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Identity.OperationClaim", null)
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.JobTitle", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Message", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.Property", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("RealEstateWebApi.Domain.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.DeedStatus", null)
                        .WithMany()
                        .HasForeignKey("DeedStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Front", null)
                        .WithMany()
                        .HasForeignKey("FrontId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.HeatingType", null)
                        .WithMany()
                        .HasForeignKey("HeatingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.InternetType", null)
                        .WithMany()
                        .HasForeignKey("InternetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Neighborhood", null)
                        .WithMany()
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.PropertyStatus", null)
                        .WithMany()
                        .HasForeignKey("PropertyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.PropertyType", null)
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Street", null)
                        .WithMany()
                        .HasForeignKey("StreetId");

                    b.HasOne("RealEstateWebApi.Domain.Entities.UsingStatus", null)
                        .WithMany()
                        .HasForeignKey("UsingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateWebApi.Domain.Entities.ShortProperty", b =>
                {
                    b.HasOne("RealEstateWebApi.Domain.Entities.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Neighborhood", null)
                        .WithMany()
                        .HasForeignKey("NeighborhoodId");

                    b.HasOne("RealEstateWebApi.Domain.Entities.PropertyStatus", null)
                        .WithMany()
                        .HasForeignKey("PropertyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.PropertyType", null)
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateWebApi.Domain.Entities.Street", null)
                        .WithMany()
                        .HasForeignKey("StreetId");
                });
#pragma warning restore 612, 618
        }
    }
}
